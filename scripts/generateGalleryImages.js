const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

// Config
const GALLERY_SRC = path.join(__dirname, '..', 'public', 'assets', 'images', 'gallery');
const GENERATED_DIR = path.join(GALLERY_SRC, 'generated');
const OUT_FILE = path.join(__dirname, '..', 'src', 'containers', 'gallery', 'images.js');
const SIZES = [480, 1024, 1600];

async function ensureDir(dir) {
  if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
}

function safeName(name) {
  return name.replace(/\s+/g, '_').replace(/[^a-zA-Z0-9_\.-]/g, '');
}

async function processImage(file) {
  const srcPath = path.join(GALLERY_SRC, file);
  const ext = path.extname(file).toLowerCase();
  const base = path.basename(file, ext);
  const outBases = [];

  try {
    const image = sharp(srcPath);
    const meta = await image.metadata();
    for (const w of SIZES) {
      if (meta.width && meta.width <= w) continue; // don't upscale
      const outName = `${safeName(base)}-${w}w${ext}`;
      const outPath = path.join(GENERATED_DIR, outName);
      await image.resize(w).toFile(outPath);
      outBases.push({ width: w, file: outName });
    }
    return { original: file, variants: outBases, width: meta.width || null, height: meta.height || null };
  } catch (e) {
    console.error('Failed to process', file, e);
    return null;
  }
}

async function build() {
  if (!fs.existsSync(GALLERY_SRC)) {
    console.warn('Gallery source folder not found:', GALLERY_SRC);
    return;
  }

  await ensureDir(GENERATED_DIR);

  const files = fs.readdirSync(GALLERY_SRC).filter(f => {
    const p = path.join(GALLERY_SRC, f);
    const stat = fs.statSync(p);
    return stat.isFile() && /\.(jpe?g|png|webp)$/i.test(f);
  });

  const items = [];
  for (const f of files) {
    const res = await processImage(f);
    if (res) items.push(res);
  }

  // Build export content
  const entries = items.map(it => {
    const original = `/assets/images/gallery/${it.original}`;
    const srcsetParts = (it.variants || []).map(v => `/assets/images/gallery/generated/${v.file} ${v.width}w`);
    const srcset = srcsetParts.join(', ');
    const alt = it.original.replace(/[-_]/g, ' ').replace(/\.(jpe?g|png|webp)$/i, '');
    return { original, srcset, alt };
  });

  const js = `// Auto-generated by scripts/generateGalleryImages.js
// Do not edit by hand

const images = ${JSON.stringify(entries, null, 2)};

export default images;
`;

  fs.writeFileSync(OUT_FILE, js, 'utf8');
  console.log('Wrote', OUT_FILE, 'with', entries.length, 'images');
}

build().catch(err => {
  console.error(err);
  process.exit(1);
});
